AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: CloudFormation template for a chatbot application

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - s3:PutObject
                Resource: "*"

  ChatbotLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ChatbotFunction
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      InlineCode: |
        import json
        import boto3
        import requests
        import os
        from datetime import datetime

        dynamodb = boto3.resource('dynamodb')
        table = dynamodb.Table('ChatbotQueries')

        def lambda_handler(event, context):
            query = json.loads(event['body']).get('query', '')
            response = {}

            if 'weather' in query.lower():
                city_part = query.split('in')[-1].strip()
                city = ''.join(char for char in city_part if char.isalpha())
                response = get_weather(city)
            elif 'joke' in query.lower():
                response = get_joke()

            log_query(query, json.dumps(response))

            return {'statusCode': 200, 'body': json.dumps(response)}

        def get_weather(city):
            api_key = os.environ['OPENWEATHER_API_KEY']
            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}"
            weather_data = requests.get(url).json()
            return {
                'city': city,
                'temperature': weather_data['main']['temp'],
                'description': weather_data['weather'][0]['description']
            }

        def get_joke():
            url = os.environ['JOKE_API_URL']
            joke_data = requests.get(url).json()
            return {
                'setup': joke_data['setup'],
                'punchline': joke_data['punchline']
            }

        def log_query(query, response):
            table.put_item(
                Item={
                    'QueryId': str(datetime.now()),
                    'Query': query,
                    'Response': response
                }
            )
      Runtime: python3.9
      Environment:
        Variables:
          OPENWEATHER_API_KEY: 5dbd18fed0310723b7ebc00a80d3c4ce
          JOKE_API_URL: https://official-joke-api.appspot.com/random_joke
          LOGGING_BUCKET: chatbot-logs-bucket
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:requests-layer:1'

  ChatbotApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ChatbotApi

  ChatbotResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ChatbotApi.RootResourceId
      PathPart: chatbot
      RestApiId: !Ref ChatbotApi

  ChatbotMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ChatbotResource
      RestApiId: !Ref ChatbotApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { LambdaArn: !GetAtt ChatbotLambdaFunction.Arn }

  ChatbotApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ChatbotMethod
    Properties:
      RestApiId: !Ref ChatbotApi
      StageName: prod

  ChatbotDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ChatbotQueries
      AttributeDefinitions:
        - AttributeName: QueryId
          AttributeType: S
      KeySchema:
        - AttributeName: QueryId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ExportLogsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ExportLogsFunction
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      InlineCode: |
        import boto3
        import json
        import os
        from datetime import datetime, timedelta

        dynamodb = boto3.resource('dynamodb')
        s3 = boto3.client('s3')
        table = dynamodb.Table('ChatbotQueries')
        bucket_name = os.environ['LOGGING_BUCKET']

        def lambda_handler(event, context):
            yesterday = datetime.now() - timedelta(days=1)
            date_str = yesterday.strftime('%Y-%m-%d')
            response = table.scan()
            logs = [item for item in response['Items'] if item['QueryId'].startswith(date_str)]

            if logs:
                s3.put_object(
                    Bucket=bucket_name,
                    Key=f'logs/{date_str}.json',
                    Body=json.dumps(logs)
                )
      Runtime: python3.9
      Environment:
        Variables:
          LOGGING_BUCKET: chatbot-logs-bucket

  ExportLogsEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 day)
      Targets:
        - Arn: !GetAtt ExportLogsLambdaFunction.Arn
          Id: "ExportLogsFunction"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ExportLogsLambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'

  PermissionForApiGatewayToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ChatbotLambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChatbotApi}/*/POST/chatbot'

Outputs:
  ChatbotApiUrl:
    Description: "API Gateway endpoint URL for chatbot"
    Value: !Sub "https://${ChatbotApi}.execute-api.${AWS::Region}.amazonaws.com/prod/chatbot"