AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: CloudFormation chatbot template with parameterized Lambda Layer ARN and dynamic Python runtime

Parameters:
  LambdaCodeS3Bucket:
    Type: String
    Description: S3 bucket with Lambda code zips

  ChatbotLambdaCodeS3Key:
    Type: String
    Default: chatbot_function.zip
    Description: Zip file key for chatbot Lambda function

  ExportLogsLambdaCodeS3Key:
    Type: String
    Default: export_logs_function.zip
    Description: Zip file key for Export logs Lambda function

  RequestsLayerArn:
    Type: String
    Description: ARN of the Lambda layer containing requests library

  PythonRuntime:
    Type: String
    Default: python3.12
    AllowedValues:
      - python3.13
      - python3.12
      - python3.11
      - python3.10
      - python3.9
    Description: Python runtime version for Lambda functions
  
  StageName:
    Type: String
    Default: api
    Description: API Gateway deployment stage name

  OpenWeatherApiKey:
    Type: String
    Default: OPENWEATHER_API_KEY
    Description: OpenWeather API key
  
  JokeApiUrl:
    Type: String
    Default: https://official-joke-api.appspot.com/random_joke
    Description: Joke API URL

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - s3:PutObject
                Resource: "*"

  ChatbotLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ChatbotFunction
      Runtime: !Ref PythonRuntime
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri:
        Bucket: !Ref LambdaCodeS3Bucket
        Key: !Ref ChatbotLambdaCodeS3Key
      Environment:
        Variables:
          OPENWEATHER_API_KEY: !Ref OpenWeatherApiKey
          JOKE_API_URL: !Ref JokeApiUrl
          LOGGING_BUCKET: chatbot-logs-bucket
      Layers:
        - !Ref RequestsLayerArn

  ExportLogsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ExportLogsFunction
      Runtime: !Ref PythonRuntime
      Handler: export_logs.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri:
        Bucket: !Ref LambdaCodeS3Bucket
        Key: !Ref ExportLogsLambdaCodeS3Key
      Environment:
        Variables:
          LOGGING_BUCKET: chatbot-logs-bucket

  ChatbotApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ChatbotApi

  ChatbotResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ChatbotApi.RootResourceId
      PathPart: chatbot
      RestApiId: !Ref ChatbotApi

  ChatbotMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ChatbotResource
      RestApiId: !Ref ChatbotApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { LambdaArn: !GetAtt ChatbotLambdaFunction.Arn }

  ChatbotApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ChatbotMethod
    Properties:
      RestApiId: !Ref ChatbotApi
      StageName: !Ref StageName

  ChatbotDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ChatbotQueries
      AttributeDefinitions:
        - AttributeName: QueryId
          AttributeType: S
      KeySchema:
        - AttributeName: QueryId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ExportLogsEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 day)
      Targets:
        - Arn: !GetAtt ExportLogsLambdaFunction.Arn
          Id: "ExportLogsFunction"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ExportLogsLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com

  PermissionForApiGatewayToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ChatbotLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChatbotApi}/*/POST/chatbot"

Outputs:
  ChatbotApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ChatbotApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/chatbot'
